package com.example.meepmeeptesting;
import com.acmerobotics.roadrunner.geometry.Pose2d;
import com.acmerobotics.roadrunner.geometry.Vector2d;
import com.noahbres.meepmeep.MeepMeep;
import com.noahbres.meepmeep.core.colorscheme.scheme.ColorSchemeRedDark;

public class MeepMeepTestingB {
    public static void main(String[] args) {
        // TODO: If you experience poor performance, enable this flag
        // System.setProperty("sun.java2d.opengl", "true");

        // Declare a MeepMeep instance
        // With a field size of 800 pixels
        MeepMeep mm = new MeepMeep(800, 800)
                // Set field image
                .setBackground(MeepMeep.Background.FIELD_ULTIMATE_GOAL_DARK)
                // Set theme
                .setTheme(new ColorSchemeRedDark())
                // Background opacity from 0-1
                .setBackgroundAlpha(1f)
                // Set constraints: maxVel, maxAccel, maxAngVel, maxAngAccel, track width
                .setConstraints(60, 60, Math.toRadians(180), Math.toRadians(180), 15)
                .followTrajectorySequence(drive ->
                        drive.trajectorySequenceBuilder(new Pose2d(-62.5, -14, 0))
                                .forward(60)
                                .splineTo(new Vector2d(38, -12), Math.toRadians(90))
                                .splineToConstantHeading(new Vector2d(56, 0), Math.toRadians(0))
                                .back(35)
                                .forward(5)
                                .splineTo(new Vector2d(-2.5, -14), Math.toRadians(0))
                                .splineTo(new Vector2d(-32, -34), Math.toRadians(0))
                                .forward(38)
                                //.strafeLeft(30)
                                //.splineTo(new Vector2d(58, -36), Math.toRadians(90))
                                //.forward(35)
                                //.back(35)
                                //.splineTo(new Vector2d(0, -18), Math.toRadians(180))
                                //sleeps/pauses
                                //.splineTo(new Vector2d(-32, -34), Math.toRadians(180))
                                //.forward(38)
                                /*.turn(Math.toRadians(90))
                                .forward(30)
                                .turn(Math.toRadians(90))
                                .forward(30)
                                .turn(Math.toRadians(90))
                                .forward(30)
                                .turn(Math.toRadians(90))*/
                                .build()
                )
                .start();
    }
}
